
//	

#define F_CPU 16000000UL

#include <avr/io.h>
#include <avr/interrupt.h>

#include "usart.h"
#include "PI.h"

volatile uint8_t update = 0x00;

ISR(TIMER0_OVF_vect)
{
	PORTB ^= ( 1 << 0 );
	TCNT0 = 100;
	update = 0x01;
}

void ADC_init()
{
	ADCSRA = ( 1 << ADEN );
	ADCSRA |= ( 1 << ADPS2 ) | ( 1 << ADPS1 ) | ( 1 << ADPS0 );
	ADMUX  &= ~( ( 1 << REFS0 ) | ( 1 << REFS1 ) );
	
	ADCSRA |= ( 1 << ADSC );
	
	while( ( ADCSRA & ( 1 << ADIF ) ) == 0 );
	
	ADCSRA |= ( 1 << ADIF );
}

uint16_t ADC_read(uint8_t channel)
{
	uint16_t result;
	
	ADMUX &= ~0x07;					//	Clear previous ADC conversion channel.
	ADMUX |= channel;
	ADCSRA |= ( 1 << ADSC );
	
	while( ADCSRA & ( 1 << ADSC ) );
	
	ADCSRA |= ( 1 << ADIF );
	
	result = ADCL;
	result |= (uint16_t)ADCH << 8;
	
	return(result);
}

float output_current = 0;
float output_voltage = 0;
float control_output = 0;
float reference_voltage = 2.45f;

uint16_t counter = 0;

int main(void)
{	
	usart_init(9600);
	
	DDRB |= ( 1 << 0 );					//	Debug pin for timing measurements.
	
	//	ADC initializaion.
	
	ADC_init();
	
	DDRB |= ( 1 << 1 );												//	Make PB1 as output. PWM is generated from here.

	//	Timer 0 configured to generate an interrupt for approximately every 10ms.
	
	TCCR0 = ( 1 << CS02 ) | ( 1 << CS00 );
	TCNT0 = 100;
	TIMSK = ( 1 << TOIE0 );

	//	Timer 1 operates in mode 14 (Fast PWM, ICR1 as TOP).
	//	PWM frequency set to 62.5 kHz.

	ICR1 = 255;
	OCR1A = 0;
	
	TCCR1A = ( 1 << COM1A1 ) | ( 1 << WGM11 );						//	Non-inverting PWM, setting Timer 1 in mode 14.
	TCCR1B = ( 1 << WGM13 ) | ( 1 << WGM12 ) | ( 1 << CS10 );		//	Prescaler of 1.

	//	

	PI voltage_controller = PI_getNew();
	
	voltage_controller->K_p = 12.25f;
	voltage_controller->K_i = 0.033f;
	voltage_controller->f_s = 100.0f;
	voltage_controller->K_b = 0.0225f;
	voltage_controller->out_max = 25.0f;
	voltage_controller->out_min = -25.0f;

	sei();

    while (1) 
    {
			if( update )
			{
				output_voltage = 0.005f * (float)ADC_read(0);						//	Output current in volts.						
				OCR1A += (int16_t)PI_update(voltage_controller,reference_voltage,output_voltage);
				update = 0x00;
			}
    }
}

